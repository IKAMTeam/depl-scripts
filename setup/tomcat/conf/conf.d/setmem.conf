#!/bin/bash
function calculate_heapsize_mb() {
    local USAGE_PERCENT METASPACE_SIZE_MB METASPACE_SIZE_KB TOTAL_MEM_KB HEAP_KB HEAP_MB
    USAGE_PERCENT=$1
    METASPACE_SIZE_MB=$2
    TOTAL_MEM_KB="$(awk '/MemTotal:/ { print $2 }' /proc/meminfo)"

    (( METASPACE_SIZE_KB=METASPACE_SIZE_MB / 1024 ))
    (( HEAP_KB=(TOTAL_MEM_KB - METASPACE_SIZE_KB) * USAGE_PERCENT / 100 ))
    (( HEAP_MB=HEAP_KB / 1024 ))

    echo "$HEAP_MB"
}

# Set default and maximum metaspace size
METASPACE_SIZE_MB="384"
METASPACE_MAX_SIZE_MB="512"

CATALINA_OPTS="$CATALINA_OPTS -XX:MetaspaceSize=${METASPACE_SIZE_MB}m"
CATALINA_OPTS="$CATALINA_OPTS -XX:MaxMetaspaceSize=${METASPACE_MAX_SIZE_MB}m"
CATALINA_OPTS="$CATALINA_OPTS -XX:CompressedClassSpaceSize=128m"

# Set maximum and minimum heap size (80% from total server memory minus metaspace size)
HEAP_SIZE_MB="$(calculate_heapsize_mb 80 "$METASPACE_MAX_SIZE_MB")"
CATALINA_OPTS="$CATALINA_OPTS -Xms${HEAP_SIZE_MB}m -Xmx${HEAP_SIZE_MB}m"

# Uncomment to crash JVM on out of memory errors and create a heap dump for further analysis.
# Warning, heap dump file size exceeds the size of JVM heap in memory, so make sure enough disk space is available.
#CATALINA_OPTS="$CATALINA_OPTS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$CATALINA_HOME/logs"
#CATALINA_OPTS="$CATALINA_OPTS -XX:+CrashOnOutOfMemoryError"

# Enable G1 garbage collector
CATALINA_OPTS="$CATALINA_OPTS -XX:+UseG1GC"

# G1 specific options
CATALINA_OPTS="$CATALINA_OPTS -XX:G1HeapRegionSize=8m"
CATALINA_OPTS="$CATALINA_OPTS -XX:MaxGCPauseMillis=200"
CATALINA_OPTS="$CATALINA_OPTS -XX:+ParallelRefProcEnabled"

# Do not let clients explicitly trigger GC
CATALINA_OPTS="$CATALINA_OPTS -XX:+DisableExplicitGC"

# Write GC log
#CATALINA_OPTS="$CATALINA_OPTS -Xlog:gc*=debug:file=$CATALINA_HOME/logs/gc-%t.log:tags,time,uptime,level"
