#!/bin/bash
function calculate_heapsize_mb() {
    local USAGE_PERCENT TOTAL_MEM_KB
    USAGE_PERCENT=$1
    TOTAL_MEM_KB="$(awk '/MemTotal:/ { print $2 }' /proc/meminfo)"

    (( HEAP_KB=TOTAL_MEM_KB * USAGE_PERCENT / 100 ))
    (( HEAP_MB=HEAP_KB / 1024 ))

    echo "$HEAP_MB"
}

# Use the Java Hotspot server optimization
CATALINA_OPTS="$CATALINA_OPTS -server"

# Set maximum and minimum heap size (80% from total server memory)
HEAP_SIZE_MB="$(calculate_heapsize_mb 80)"
CATALINA_OPTS="$CATALINA_OPTS -Xms${HEAP_SIZE_MB}m -Xmx${HEAP_SIZE_MB}m"

# Do not let clients explicitly trigger GC
CATALINA_OPTS="$CATALINA_OPTS -XX:+DisableExplicitGC"

CATALINA_OPTS="$CATALINA_OPTS -Djava.security.egd=file:///dev/urandom"

# Use only IPv4
CATALINA_OPTS="$CATALINA_OPTS -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true"

# Write error log on native crash to specific path
CATALINA_OPTS="$CATALINA_OPTS -XX:ErrorFile=$CATALINA_HOME/logs/hs_err_pid%p.log"

# Uncomment to crash JVM on out of memory errors and create a heap dump for further analysis.
# Warning, heap dump file size exceeds the size of JVM heap in memory, so make sure enough disk space is available.
#CATALINA_OPTS="$CATALINA_OPTS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$CATALINA_HOME/logs"
#CATALINA_OPTS="$CATALINA_OPTS -XX:+CrashOnOutOfMemoryError"
